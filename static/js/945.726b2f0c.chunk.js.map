{"version":3,"file":"static/js/945.726b2f0c.chunk.js","mappings":"sOAGaA,EAAOC,EAAAA,GAAAA,GAAH,iJAQJC,EAAOD,EAAAA,GAAAA,GAAH,0EAMJE,GAAOF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,8FAKJI,EAAMJ,EAAAA,GAAAA,IAAH,6N,uCCwBhB,EAxCa,WACX,OAA2CK,EAAAA,EAAAA,UAAS,IAApD,eAAOC,EAAP,KAAuBC,EAAvB,KAEMC,GAAWC,EAAAA,EAAAA,MAOjB,OALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAA2BC,MAAK,SAAAC,GAC9BN,EAAiBM,EAAKC,QACvB,GACF,KAEC,SAACf,EAAD,UACGO,EAAeS,KACd,YAOO,IANLC,EAMI,EANJA,YACAC,EAKI,EALJA,MACAC,EAII,EAJJA,GACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,eACAC,EACI,EADJA,aAEA,OACE,SAACpB,EAAD,WACE,UAACC,EAAD,CAAMoB,GAAE,kBAAaJ,GAAMK,MAAOf,EAAlC,WACE,SAACJ,EAAD,CACEoB,IAAG,0CAAqCR,GACxCS,IAAKL,KAEP,uBAAIH,KACJ,uBAAIE,KACJ,uBAAIE,EAAaK,QAAQ,SARlBR,EAYd,KAIR,C,4MC1CKS,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAsB,mCAAG,WAAOC,EAAOC,GAAd,kGAEXH,IAAAA,IAAU,iBAAkB,CACjDI,OAAQ,CACNF,MAAAA,EACAC,KAAAA,EACAE,QAASN,KANqB,uBAE1Bd,EAF0B,EAE1BA,KAF0B,kBAS3BA,GAT2B,sCAWlCqB,QAAQC,IAAR,MAXkC,8DAAH,wDAgBtBxB,EAAwB,mCAAG,+GAEbiB,IAAAA,IAAU,uBAAwB,CACvDI,OAAQ,CACNC,QAASN,EACTI,KAAK,KAL2B,uBAE5BlB,EAF4B,EAE5BA,KAF4B,kBAS7BA,GAT6B,oGAAH,qDAcxBuB,EAAuB,mCAAG,WAAMC,GAAN,kGAEZT,IAAAA,IAAA,gBAAmBS,GAAW,CACnDL,OAAQ,CACNC,QAASN,EACTW,SAAU,WALqB,uBAE3BzB,EAF2B,EAE3BA,KAF2B,kBAS5BA,GAT4B,oGAAH,sDAevB0B,EAAoB,mCAAG,WAAMF,GAAN,kGAETT,IAAAA,IAAA,gBAAmBS,EAAnB,YAAsC,CAC3DL,OAAQ,CACNC,QAASN,EACTW,SAAU,WALkB,uBAExBzB,EAFwB,EAExBA,KAFwB,kBASzBA,GATyB,oGAAH,sDAepB2B,EAAuB,mCAAG,WAAMH,GAAN,kGAEZT,IAAAA,IAAA,iBAAoBS,EAApB,YAAuC,CAC5DL,OAAQ,CACNC,QAASN,EACTW,SAAU,QACVP,KAAM,KANyB,uBAE3BlB,EAF2B,EAE3BA,KAF2B,kBAS5BA,GAT4B,oGAAH,qD,sBCjErB,SAAS4B,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["page/Home/Home.styled.js","page/Home/Home.jsx","utils/SerchMoviesAPI.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  max-width: 1280px;\n  margin: 0 auto;\n`;\nexport const Item = styled.li`\n  \n  text-align: center;\n  border-radius: 5px;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  font-size: 17px;\n  font-weight: bolder;\n`;\nexport const Img = styled.img`\n  border-radius: 5px;\n  box-shadow: 0 0 19px;\n  height: 425px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover{\n\n  transform: scale(1.03);\n  cursor: pointer;\n\n  }\n`;\n","import { Link, List,Img } from './Home.styled';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getRequestTrendingMovies } from 'utils/SerchMoviesAPI';\nimport { Item } from './Home.styled';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovis] = useState([]);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    getRequestTrendingMovies().then(data => {\n      setTrendingMovis(data.results);\n    });\n  });\n  return (\n    <List>\n      {trendingMovies.map(\n        ({\n          poster_path,\n          title,\n          id,\n          release_date,\n          original_title,\n          vote_average,\n        }) => {\n          return (\n            <Item key={id}>\n              <Link to={`/movies/${id}`} state={location}>\n                <Img\n                  src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                  alt={original_title}\n                />\n                <p>{title}</p>\n                <p>{release_date}</p>\n                <p>{vote_average.toFixed(1)}</p>\n              </Link>\n            </Item>\n          );\n        }\n      )}\n    </List>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '96f98372ec97554f75b9ec4b9ecd00d9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getRequestSearchMovies = async (query, page) => {\n  try {\n    const { data } = await axios.get('/search/movie/', {\n      params: {\n        query,\n        page,\n        api_key: API_KEY,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\nexport const getRequestTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get('/trending/movie/week', {\n      params: {\n        api_key: API_KEY,\n        page:1,\n      },\n    });\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getRequestMoviesDitails = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getRequestMoviesCast = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n    // console.log(data);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getRequestMoviesReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["List","styled","Item","Link","NavLink","Img","useState","trendingMovies","setTrendingMovis","location","useLocation","useEffect","getRequestTrendingMovies","then","data","results","map","poster_path","title","id","release_date","original_title","vote_average","to","state","src","alt","toFixed","API_KEY","axios","getRequestSearchMovies","query","page","params","api_key","console","log","getRequestMoviesDitails","movieId","language","getRequestMoviesCast","getRequestMoviesReviews","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}